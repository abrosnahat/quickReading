{"version":3,"sources":["App.jsx","serviceWorker.js","index.jsx"],"names":["text","i","App","props","handleChange","e","target","value","split","chengeState","timerI","setInterval","length","stop","start","a","setState","data","replace","timerStart","clearInterval","hide","hideTextarea","state","classNames","cn","textarea","this","onChange","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAMIA,G,MAAO,IACPC,EAAI,EA+DOC,E,kDA5Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,aAAe,SAACC,GAAD,OAAOL,EAAOK,EAAEC,OAAOC,MAAMC,MAAM,MAL/B,EAOnBC,YAAc,kBAAM,EAAKC,OAASC,aAAY,WACxCV,EAAID,EAAKY,OAAS,EACpBX,GAAK,EAEL,EAAKY,SAGN,MAdgB,EAgBnBC,MAhBmB,sBAgBX,sBAAAC,EAAA,yDACc,IAAhBf,EAAKY,OADH,uBAEJ,EAAKC,OACL,EAAKJ,cAHD,SAIoBE,aACtB,kBAAM,EAAKK,SAAS,CAAEC,KAAMjB,EAAKC,GAAGiB,QAAQ,WAAY,QACxD,GANE,OAIJ,EAAKC,WAJD,cASN,EAAKH,SAAS,CAAEC,KAAM,mHAThB,2CAhBW,EA4BnBJ,KAAO,WACLO,cAAc,EAAKD,YACnBC,cAAc,EAAKV,QACnB,EAAKM,SAAS,CAAEK,MAAM,IACtBpB,EAAI,GAhCa,EAmCnBqB,aAAe,WACb,EAAKN,SAAS,CAAEK,MAAM,KAlCtB,EAAKE,MAAQ,CAAEN,KAAM,kFAAkBI,MAAM,GAF5B,E,qDAuCT,IAAD,OACDG,EAAaC,IAAG,CACpBC,UAAU,EACVL,KAAMM,KAAKJ,MAAMF,OAGnB,OACE,6BACI,4BAEIM,KAAKJ,MAAMN,MAGf,8BAAUW,SAAUD,KAAKvB,aAAcyB,UAAWL,IAClD,4BAAQK,UAAU,SAASC,QAAS,WAAO,EAAKhB,QAAS,EAAKQ,iBAA9D,kCACA,4BAAQO,UAAU,SAASC,QAASH,KAAKd,MAAzC,iC,GAvDQkB,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52a86931.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\nimport './App.css';\n\n// const text = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30'];\nlet text = [];\nlet i = 0;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: 'Вставьте текст', hide: false };\n  }\n\n  handleChange = (e) => text = e.target.value.split(' ');\n\n  chengeState = () => this.timerI = setInterval(() => {\n    if (i < text.length - 1) {\n      i += 1;\n    } else {\n      this.stop();\n    }\n    \n  }, 250);\n\n  start = async () => {\n    if (text.length !== 0) {\n      this.stop();\n      this.chengeState();\n      this.timerStart = await setInterval(\n        () => this.setState({ data: text[i].replace(/[\\s.,%]/g, '') }),\n        0\n      );\n    }\n    this.setState({ data: 'Нужно вставить текст' })\n  }\n\n  stop = () => {\n    clearInterval(this.timerStart);\n    clearInterval(this.timerI);\n    this.setState({ hide: false })\n    i = 0;\n  }\n\n  hideTextarea = () => {\n    this.setState({ hide: true })\n  }\n\n  render() {\n    const classNames = cn({\n      textarea: true,\n      hide: this.state.hide \n    })\n\n    return (\n      <div>\n          <h1>\n            {\n              this.state.data\n            }\n          </h1>\n          <textarea onChange={this.handleChange} className={classNames}></textarea>\n          <button className=\"button\" onClick={() => {this.start(); this.hideTextarea()}}>Старт</button>\n          <button className=\"button\" onClick={this.stop}>Стоп</button>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}