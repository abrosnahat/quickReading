{"version":3,"sources":["App.jsx","serviceWorker.js","index.jsx"],"names":["text","i","App","state","data","hide","speed","textareaText","e","target","value","split","chengeState","timerI","setInterval","length","clearIntervals","start","timerStart","setState","replace","clearInterval","pause","restart","hideTextarea","updateSpeed","textareaClass","cn","textarea","this","rangeClass","range","rangeSpanClass","buttonsMargin","marginTop","className","onChange","placeholder","toFixed","type","defaultValue","min","max","style","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAKIA,G,MAAO,CAAC,wCAAW,2BAAQ,+DAAc,SAAK,mDAAY,2BAAQ,kCAAU,eAAM,mDAAY,qEAAe,uCAAU,uCAAU,iBACjIC,EAAI,EAwFOC,E,4MArFbC,MAAQ,CAAEC,KAAM,kFAAkBC,MAAM,EAAOC,MAAO,K,EAEtDC,aAAe,SAACC,GAAD,OAAOR,EAAOQ,EAAEC,OAAOC,MAAMC,MAAM,M,EAElDC,YAAc,kBAAM,EAAKC,OAASC,aAAY,WAC3Cb,EAAID,EAAKe,OAAS,EAAKd,GAAK,EAAI,EAAKe,mBACrC,EAAKb,MAAMG,Q,EAEdW,MAAQ,WACc,IAAhBjB,EAAKe,QACP,EAAKH,cACL,EAAKM,WAAaJ,aAChB,kBAAM,EAAKK,SAAS,CAAEf,KAAMJ,EAAKC,GAAGmB,QAAQ,WAAY,IAAKf,MAAM,MACnE,IAGF,EAAKc,SAAS,CAAEf,KAAM,iHAAwBC,MAAM,K,EAKxDW,eAAiB,WACfK,cAAc,EAAKH,YACnBG,cAAc,EAAKR,QACnB,EAAKM,SAAS,CAAEd,MAAM,IACtBJ,EAAI,G,EAGNqB,MAAQ,WACND,cAAc,EAAKH,YACnBG,cAAc,EAAKR,QACnB,EAAKM,SAAS,CAAEd,MAAM,K,EAGxBkB,QAAU,WACR,EAAKP,iBACL,EAAKC,S,EAGPO,aAAe,WACb,EAAKL,SAAS,CAAEd,MAAM,K,EAGxBoB,YAAc,SAACjB,GACb,EAAKW,SAAS,CAAEb,MAAOE,EAAEC,OAAOC,S,uDAIhC,IAAMgB,EAAgBC,IAAG,CACvBC,UAAU,EACVvB,KAAMwB,KAAK1B,MAAME,OAGbyB,EAAaH,IAAG,CACpBI,OAAO,EACP1B,KAAMwB,KAAK1B,MAAME,OAGb2B,EAAiBL,IAAG,CACxB,cAAc,EACdtB,KAAMwB,KAAK1B,MAAME,OAGb4B,EAAgBJ,KAAK1B,MAAME,KAAO,CAAC6B,UAAW,SAAW,KAG/D,OACE,oCACG,wBAAIC,UAAU,QAAQN,KAAK1B,MAAMC,MAClC,8BAAUgC,SAAUP,KAAKtB,aAAc4B,UAAWT,EAAeW,YALpD,ycAMb,0BAAMF,UAAWH,IAAkB,IAAOH,KAAK1B,MAAMG,OAAOgC,QAAQ,GAApE,+BACA,2BAAOC,KAAK,QAAQJ,UAAWL,EAAYM,SAAUP,KAAKJ,YAAae,aAAc,IAAKC,IAAK,IAAKC,IAAK,MACzG,yBAAKP,UAAU,UAAUQ,MAAOV,GAC5BJ,KAAK1B,MAAME,KAGX,4BAAQ8B,UAAU,SAASS,QAASf,KAAKP,OAAzC,kCAFA,4BAAQa,UAAW,SAAUS,QAASf,KAAKZ,OAA3C,kCAIF,4BAAQkB,UAAU,SAASS,QAASf,KAAKN,SAAzC,oD,GA/EQsB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5fe0c043.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\nimport './App.scss';\n\nlet text = [\"–ü—Ä–∏–≤–µ—Ç!\", \"–ï—Å–ª–∏\", \"—Å–∫–æ–ø–∏—Ä—É–µ—à—å\", \"–∏\", \"–≤—Å—Ç–∞–≤–∏—à—å\", \"—Å—é–¥–∞\", \"—Ç–µ–∫—Å—Ç,\", \"—Ç–æ\", \"–æ–±—Ä–µ—Ç–µ—à—å\", \"—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\", \"–±—ã—Å—Ç—Ä–æ\", \"—á–∏—Ç–∞—Ç—å\", \"üòä\"];\nlet i = 0;\n\nclass App extends React.Component {\n  state = { data: '–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç', hide: false, speed: 250 };\n\n  textareaText = (e) => text = e.target.value.split(' ');\n\n  chengeState = () => this.timerI = setInterval(() => {\n    (i < text.length - 1) ? i += 1 : this.clearIntervals(); \n  }, this.state.speed);\n\n  start = () => {\n    if (text.length !== 0) {\n      this.chengeState();\n      this.timerStart = setInterval(\n        () => this.setState({ data: text[i].replace(/[\\s.,%]/g, ''), hide: true }),\n        0\n      );\n    } else {\n      this.setState({ data: '–ù—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç', hide: false })\n    }\n    \n  }\n\n  clearIntervals = () => {\n    clearInterval(this.timerStart);\n    clearInterval(this.timerI);\n    this.setState({ hide: false })\n    i = 0;\n  }\n\n  pause = () => {\n    clearInterval(this.timerStart);\n    clearInterval(this.timerI);\n    this.setState({ hide: false })\n  }\n\n  restart = () => {\n    this.clearIntervals();\n    this.start();\n  }\n\n  hideTextarea = () => {\n    this.setState({ hide: true })\n  }\n\n  updateSpeed = (e) => {\n    this.setState({ speed: e.target.value })\n  }\n\n  render() {\n    const textareaClass = cn({\n      textarea: true,\n      hide: this.state.hide \n    });\n\n    const rangeClass = cn({\n      range: true,\n      hide: this.state.hide \n    });\n\n    const rangeSpanClass = cn({\n      \"range-span\": true,\n      hide: this.state.hide \n    });\n\n    const buttonsMargin = this.state.hide ? {marginTop: '497px'} : null;\n    const placeholder = `–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Å–∫–æ–ø–∏—Ä—É–µ—à—å –∏ –≤—Å—Ç–∞–≤–∏—à—å —Å—é–¥–∞ —Ç–µ–∫—Å—Ç, —Ç–æ –æ–±—Ä–µ—Ç–µ—à—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ —á–∏—Ç–∞—Ç—å üòä`;\n\n    return (\n      <>\n        {<h1 className=\"word\">{this.state.data}</h1>}\n        <textarea onChange={this.textareaText} className={textareaClass} placeholder={placeholder} />\n        <span className={rangeSpanClass}>{(1000 / this.state.speed).toFixed(2)}  —Å/—Å–µ–∫</span>\n        <input type=\"range\" className={rangeClass} onChange={this.updateSpeed} defaultValue={250} min={100} max={500} />\n        <div className=\"buttons\" style={buttonsMargin}>\n          {!this.state.hide ? (\n            <button className={\"button\"} onClick={this.start}>–°—Ç–∞—Ä—Ç</button>\n          ) : (\n            <button className=\"button\" onClick={this.pause}>–ü–∞—É–∑–∞</button>\n          )}\n          <button className=\"button\" onClick={this.restart}>–†–µ—Å—Ç–∞—Ä—Ç</button>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}